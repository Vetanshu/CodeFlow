{"ast":null,"code":"import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n  /// @internal\n  constructor(\n  /// The parse that this stack is part of @internal\n  p,\n  /// Holds state, input pos, buffer index triplets for all but the\n  /// top state @internal\n  stack,\n  /// The current parse state @internal\n  state,\n  // The position at which the next reduce should take place. This\n  // can be less than `this.pos` when skipped expressions have been\n  // added to the stack (which should be moved outside of the next\n  // reduction)\n  /// @internal\n  reducePos,\n  /// The input position up to which this stack has parsed.\n  pos,\n  /// The dynamic score of the stack, including dynamic precedence\n  /// and error-recovery penalties\n  /// @internal\n  score,\n  // The output buffer. Holds (type, start, end, size) quads\n  // representing nodes created by the parser, where `size` is\n  // amount of buffer array entries covered by this node.\n  /// @internal\n  buffer,\n  // The base offset of the buffer. When stacks are split, the split\n  // instance shared the buffer history with its parent up to\n  // `bufferBase`, which is the absolute offset (including the\n  // offset of previous splits) into the buffer at which this stack\n  // starts writing.\n  /// @internal\n  bufferBase,\n  /// @internal\n  curContext) {\n    let lookAhead = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;\n    let\n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent = arguments.length > 10 ? arguments[10] : undefined;\n    this.p = p;\n    this.stack = stack;\n    this.state = state;\n    this.reducePos = reducePos;\n    this.pos = pos;\n    this.score = score;\n    this.buffer = buffer;\n    this.bufferBase = bufferBase;\n    this.curContext = curContext;\n    this.lookAhead = lookAhead;\n    this.parent = parent;\n  }\n  /// @internal\n  toString() {\n    return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n  }\n  // Start an empty stack\n  /// @internal\n  static start(p, state) {\n    let pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let cx = p.parser.context;\n    return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n  }\n  /// The stack's current [context](#lr.ContextTracker) value, if\n  /// any. Its type will depend on the context tracker's type\n  /// parameter, or it will be `null` if there is no context\n  /// tracker.\n  get context() {\n    return this.curContext ? this.curContext.context : null;\n  }\n  // Push a state onto the stack, tracking its start position as well\n  // as the buffer base at that point.\n  /// @internal\n  pushState(state, start) {\n    this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n    this.state = state;\n  }\n  // Apply a reduce action\n  /// @internal\n  reduce(action) {\n    var _a;\n    let depth = action >> 19 /* Action.ReduceDepthShift */,\n      type = action & 65535 /* Action.ValueMask */;\n    let {\n      parser\n    } = this.p;\n    let dPrec = parser.dynamicPrecedence(type);\n    if (dPrec) this.score += dPrec;\n    if (depth == 0) {\n      this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n      // Zero-depth reductions are a special caseâ€”they add stuff to\n      // the stack without popping anything off.\n      if (type < parser.minRepeatTerm) this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n      this.reduceContext(type, this.reducePos);\n      return;\n    }\n    // Find the base index into `this.stack`, content after which will\n    // be dropped. Note that with `StayFlag` reductions we need to\n    // consume two extra frames (the dummy parent node for the skipped\n    // expression and the state that we'll be staying in, which should\n    // be moved to `this.state`).\n    let base = this.stack.length - (depth - 1) * 3 - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n    let start = base ? this.stack[base - 2] : this.p.ranges[0].from,\n      size = this.reducePos - start;\n    // This is a kludge to try and detect overly deep left-associative\n    // trees, which will not increase the parse stack depth and thus\n    // won't be caught by the regular stack-depth limit check.\n    if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n      if (start == this.p.lastBigReductionStart) {\n        this.p.bigReductionCount++;\n        this.p.lastBigReductionSize = size;\n      } else if (this.p.lastBigReductionSize < size) {\n        this.p.bigReductionCount = 1;\n        this.p.lastBigReductionStart = start;\n        this.p.lastBigReductionSize = size;\n      }\n    }\n    let bufferBase = base ? this.stack[base - 1] : 0,\n      count = this.bufferBase + this.buffer.length - bufferBase;\n    // Store normal terms or `R -> R R` repeat reductions\n    if (type < parser.minRepeatTerm || action & 131072 /* Action.RepeatFlag */) {\n      let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n      this.storeNode(type, start, pos, count + 4, true);\n    }\n    if (action & 262144 /* Action.StayFlag */) {\n      this.state = this.stack[base];\n    } else {\n      let baseStateID = this.stack[base - 3];\n      this.state = parser.getGoto(baseStateID, type, true);\n    }\n    while (this.stack.length > base) this.stack.pop();\n    this.reduceContext(type, start);\n  }\n  // Shift a value into the buffer\n  /// @internal\n  storeNode(term, start, end) {\n    let size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;\n    let isReduce = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    if (term == 0 /* Term.Err */ && (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n      // Try to omit/merge adjacent error nodes\n      let cur = this,\n        top = this.buffer.length;\n      if (top == 0 && cur.parent) {\n        top = cur.bufferBase - cur.parent.bufferBase;\n        cur = cur.parent;\n      }\n      if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n        if (start == end) return;\n        if (cur.buffer[top - 2] >= start) {\n          cur.buffer[top - 2] = end;\n          return;\n        }\n      }\n    }\n    if (!isReduce || this.pos == end) {\n      // Simple case, just append\n      this.buffer.push(term, start, end, size);\n    } else {\n      // There may be skipped nodes that have to be moved forward\n      let index = this.buffer.length;\n      if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */) while (index > 0 && this.buffer[index - 2] > end) {\n        // Move this record forward\n        this.buffer[index] = this.buffer[index - 4];\n        this.buffer[index + 1] = this.buffer[index - 3];\n        this.buffer[index + 2] = this.buffer[index - 2];\n        this.buffer[index + 3] = this.buffer[index - 1];\n        index -= 4;\n        if (size > 4) size -= 4;\n      }\n      this.buffer[index] = term;\n      this.buffer[index + 1] = start;\n      this.buffer[index + 2] = end;\n      this.buffer[index + 3] = size;\n    }\n  }\n  // Apply a shift action\n  /// @internal\n  shift(action, next, nextEnd) {\n    let start = this.pos;\n    if (action & 131072 /* Action.GotoFlag */) {\n      this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n    } else if ((action & 262144 /* Action.StayFlag */) == 0) {\n      // Regular shift\n      let nextState = action,\n        {\n          parser\n        } = this.p;\n      if (nextEnd > this.pos || next <= parser.maxNode) {\n        this.pos = nextEnd;\n        if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */)) this.reducePos = nextEnd;\n      }\n      this.pushState(nextState, start);\n      this.shiftContext(next, start);\n      if (next <= parser.maxNode) this.buffer.push(next, start, nextEnd, 4);\n    } else {\n      // Shift-and-stay, which means this is a skipped token\n      this.pos = nextEnd;\n      this.shiftContext(next, start);\n      if (next <= this.p.parser.maxNode) this.buffer.push(next, start, nextEnd, 4);\n    }\n  }\n  // Apply an action\n  /// @internal\n  apply(action, next, nextEnd) {\n    if (action & 65536 /* Action.ReduceFlag */) this.reduce(action);else this.shift(action, next, nextEnd);\n  }\n  // Add a prebuilt (reused) node into the buffer.\n  /// @internal\n  useNode(value, next) {\n    let index = this.p.reused.length - 1;\n    if (index < 0 || this.p.reused[index] != value) {\n      this.p.reused.push(value);\n      index++;\n    }\n    let start = this.pos;\n    this.reducePos = this.pos = start + value.length;\n    this.pushState(next, start);\n    this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n    if (this.curContext) this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n  }\n  // Split the stack. Due to the buffer sharing and the fact\n  // that `this.stack` tends to stay quite shallow, this isn't very\n  // expensive.\n  /// @internal\n  split() {\n    let parent = this;\n    let off = parent.buffer.length;\n    // Because the top of the buffer (after this.pos) may be mutated\n    // to reorder reductions and skipped tokens, and shared buffers\n    // should be immutable, this copies any outstanding skipped tokens\n    // to the new buffer, and puts the base pointer before them.\n    while (off > 0 && parent.buffer[off - 2] > parent.reducePos) off -= 4;\n    let buffer = parent.buffer.slice(off),\n      base = parent.bufferBase + off;\n    // Make sure parent points to an actual parent with content, if there is such a parent.\n    while (parent && base == parent.bufferBase) parent = parent.parent;\n    return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n  }\n  // Try to recover from an error by 'deleting' (ignoring) one token.\n  /// @internal\n  recoverByDelete(next, nextEnd) {\n    let isNode = next <= this.p.parser.maxNode;\n    if (isNode) this.storeNode(next, this.pos, nextEnd, 4);\n    this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n    this.pos = this.reducePos = nextEnd;\n    this.score -= 190 /* Recover.Delete */;\n  }\n  /// Check if the given term would be able to be shifted (optionally\n  /// after some reductions) on this stack. This can be useful for\n  /// external tokenizers that want to make sure they only provide a\n  /// given token when it applies.\n  canShift(term) {\n    for (let sim = new SimulatedStack(this);;) {\n      let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n      if (action == 0) return false;\n      if ((action & 65536 /* Action.ReduceFlag */) == 0) return true;\n      sim.reduce(action);\n    }\n  }\n  // Apply up to Recover.MaxNext recovery actions that conceptually\n  // inserts some missing token or rule.\n  /// @internal\n  recoverByInsert(next) {\n    if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */) return [];\n    let nextStates = this.p.parser.nextStates(this.state);\n    if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n      let best = [];\n      for (let i = 0, s; i < nextStates.length; i += 2) {\n        if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next)) best.push(nextStates[i], s);\n      }\n      if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */) for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n        let s = nextStates[i + 1];\n        if (!best.some((v, i) => i & 1 && v == s)) best.push(nextStates[i], s);\n      }\n      nextStates = best;\n    }\n    let result = [];\n    for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n      let s = nextStates[i + 1];\n      if (s == this.state) continue;\n      let stack = this.split();\n      stack.pushState(s, this.pos);\n      stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n      stack.shiftContext(nextStates[i], this.pos);\n      stack.score -= 200 /* Recover.Insert */;\n      result.push(stack);\n    }\n    return result;\n  }\n  // Force a reduce, if possible. Return false if that can't\n  // be done.\n  /// @internal\n  forceReduce() {\n    let reduce = this.p.parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n    if ((reduce & 65536 /* Action.ReduceFlag */) == 0) return false;\n    let {\n      parser\n    } = this.p;\n    if (!parser.validAction(this.state, reduce)) {\n      let depth = reduce >> 19 /* Action.ReduceDepthShift */,\n        term = reduce & 65535 /* Action.ValueMask */;\n      let target = this.stack.length - depth * 3;\n      if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) return false;\n      this.storeNode(0 /* Term.Err */, this.reducePos, this.reducePos, 4, true);\n      this.score -= 100 /* Recover.Reduce */;\n    }\n\n    this.reducePos = this.pos;\n    this.reduce(reduce);\n    return true;\n  }\n  /// @internal\n  forceAll() {\n    while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n      if (!this.forceReduce()) {\n        this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n        break;\n      }\n    }\n    return this;\n  }\n  /// Check whether this state has no further actions (assumed to be a direct descendant of the\n  /// top state, since any other states must be able to continue\n  /// somehow). @internal\n  get deadEnd() {\n    if (this.stack.length != 3) return false;\n    let {\n      parser\n    } = this.p;\n    return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ && !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n  }\n  /// Restart the stack (put it back in its start state). Only safe\n  /// when this.stack.length == 3 (state is directly below the top\n  /// state). @internal\n  restart() {\n    this.state = this.stack[0];\n    this.stack.length = 0;\n  }\n  /// @internal\n  sameState(other) {\n    if (this.state != other.state || this.stack.length != other.stack.length) return false;\n    for (let i = 0; i < this.stack.length; i += 3) if (this.stack[i] != other.stack[i]) return false;\n    return true;\n  }\n  /// Get the parser used by this stack.\n  get parser() {\n    return this.p.parser;\n  }\n  /// Test whether a given dialect (by numeric ID, as exported from\n  /// the terms file) is enabled.\n  dialectEnabled(dialectID) {\n    return this.p.parser.dialect.flags[dialectID];\n  }\n  shiftContext(term, start) {\n    if (this.curContext) this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n  }\n  reduceContext(term, start) {\n    if (this.curContext) this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n  }\n  /// @internal\n  emitContext() {\n    let last = this.buffer.length - 1;\n    if (last < 0 || this.buffer[last] != -3) this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n  }\n  /// @internal\n  emitLookAhead() {\n    let last = this.buffer.length - 1;\n    if (last < 0 || this.buffer[last] != -4) this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n  }\n  updateContext(context) {\n    if (context != this.curContext.context) {\n      let newCx = new StackContext(this.curContext.tracker, context);\n      if (newCx.hash != this.curContext.hash) this.emitContext();\n      this.curContext = newCx;\n    }\n  }\n  /// @internal\n  setLookAhead(lookAhead) {\n    if (lookAhead > this.lookAhead) {\n      this.emitLookAhead();\n      this.lookAhead = lookAhead;\n    }\n  }\n  /// @internal\n  close() {\n    if (this.curContext && this.curContext.tracker.strict) this.emitContext();\n    if (this.lookAhead > 0) this.emitLookAhead();\n  }\n}\nclass StackContext {\n  constructor(tracker, context) {\n    this.tracker = tracker;\n    this.context = context;\n    this.hash = tracker.strict ? tracker.hash(context) : 0;\n  }\n}\nvar Recover;\n(function (Recover) {\n  Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n  Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n  Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n  Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n  Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n  Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n  Recover[Recover[\"MinBigReduction\"] = 2000] = \"MinBigReduction\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n  constructor(start) {\n    this.start = start;\n    this.state = start.state;\n    this.stack = start.stack;\n    this.base = this.stack.length;\n  }\n  reduce(action) {\n    let term = action & 65535 /* Action.ValueMask */,\n      depth = action >> 19 /* Action.ReduceDepthShift */;\n    if (depth == 0) {\n      if (this.stack == this.start.stack) this.stack = this.stack.slice();\n      this.stack.push(this.state, 0, 0);\n      this.base += 3;\n    } else {\n      this.base -= (depth - 1) * 3;\n    }\n    let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n    this.state = goto;\n  }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n  constructor(stack, pos, index) {\n    this.stack = stack;\n    this.pos = pos;\n    this.index = index;\n    this.buffer = stack.buffer;\n    if (this.index == 0) this.maybeNext();\n  }\n  static create(stack) {\n    let pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stack.bufferBase + stack.buffer.length;\n    return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n  }\n  maybeNext() {\n    let next = this.stack.parent;\n    if (next != null) {\n      this.index = this.stack.bufferBase - next.bufferBase;\n      this.stack = next;\n      this.buffer = next.buffer;\n    }\n  }\n  get id() {\n    return this.buffer[this.index - 4];\n  }\n  get start() {\n    return this.buffer[this.index - 3];\n  }\n  get end() {\n    return this.buffer[this.index - 2];\n  }\n  get size() {\n    return this.buffer[this.index - 1];\n  }\n  next() {\n    this.index -= 4;\n    this.pos -= 4;\n    if (this.index == 0) this.maybeNext();\n  }\n  fork() {\n    return new StackBufferCursor(this.stack, this.pos, this.index);\n  }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input) {\n  let Type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Uint16Array;\n  if (typeof input != \"string\") return input;\n  let array = null;\n  for (let pos = 0, out = 0; pos < input.length;) {\n    let value = 0;\n    for (;;) {\n      let next = input.charCodeAt(pos++),\n        stop = false;\n      if (next == 126 /* Encode.BigValCode */) {\n        value = 65535 /* Encode.BigVal */;\n        break;\n      }\n      if (next >= 92 /* Encode.Gap2 */) next--;\n      if (next >= 34 /* Encode.Gap1 */) next--;\n      let digit = next - 32 /* Encode.Start */;\n      if (digit >= 46 /* Encode.Base */) {\n        digit -= 46 /* Encode.Base */;\n        stop = true;\n      }\n      value += digit;\n      if (stop) break;\n      value *= 46 /* Encode.Base */;\n    }\n\n    if (array) array[out++] = value;else array = new Type(value);\n  }\n  return array;\n}\nclass CachedToken {\n  constructor() {\n    this.start = -1;\n    this.value = -1;\n    this.end = -1;\n    this.extended = -1;\n    this.lookAhead = 0;\n    this.mask = 0;\n    this.context = 0;\n  }\n}\nconst nullToken = new CachedToken();\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n  /// @internal\n  constructor(\n  /// @internal\n  input,\n  /// @internal\n  ranges) {\n    this.input = input;\n    this.ranges = ranges;\n    /// @internal\n    this.chunk = \"\";\n    /// @internal\n    this.chunkOff = 0;\n    /// Backup chunk\n    this.chunk2 = \"\";\n    this.chunk2Pos = 0;\n    /// The character code of the next code unit in the input, or -1\n    /// when the stream is at the end of the input.\n    this.next = -1;\n    /// @internal\n    this.token = nullToken;\n    this.rangeIndex = 0;\n    this.pos = this.chunkPos = ranges[0].from;\n    this.range = ranges[0];\n    this.end = ranges[ranges.length - 1].to;\n    this.readNext();\n  }\n  /// @internal\n  resolveOffset(offset, assoc) {\n    let range = this.range,\n      index = this.rangeIndex;\n    let pos = this.pos + offset;\n    while (pos < range.from) {\n      if (!index) return null;\n      let next = this.ranges[--index];\n      pos -= range.from - next.to;\n      range = next;\n    }\n    while (assoc < 0 ? pos > range.to : pos >= range.to) {\n      if (index == this.ranges.length - 1) return null;\n      let next = this.ranges[++index];\n      pos += next.from - range.to;\n      range = next;\n    }\n    return pos;\n  }\n  /// @internal\n  clipPos(pos) {\n    if (pos >= this.range.from && pos < this.range.to) return pos;\n    for (let range of this.ranges) if (range.to > pos) return Math.max(pos, range.from);\n    return this.end;\n  }\n  /// Look at a code unit near the stream position. `.peek(0)` equals\n  /// `.next`, `.peek(-1)` gives you the previous character, and so\n  /// on.\n  ///\n  /// Note that looking around during tokenizing creates dependencies\n  /// on potentially far-away content, which may reduce the\n  /// effectiveness incremental parsingâ€”when looking forwardâ€”or even\n  /// cause invalid reparses when looking backward more than 25 code\n  /// units, since the library does not track lookbehind.\n  peek(offset) {\n    let idx = this.chunkOff + offset,\n      pos,\n      result;\n    if (idx >= 0 && idx < this.chunk.length) {\n      pos = this.pos + offset;\n      result = this.chunk.charCodeAt(idx);\n    } else {\n      let resolved = this.resolveOffset(offset, 1);\n      if (resolved == null) return -1;\n      pos = resolved;\n      if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n        result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n      } else {\n        let i = this.rangeIndex,\n          range = this.range;\n        while (range.to <= pos) range = this.ranges[++i];\n        this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n        if (pos + this.chunk2.length > range.to) this.chunk2 = this.chunk2.slice(0, range.to - pos);\n        result = this.chunk2.charCodeAt(0);\n      }\n    }\n    if (pos >= this.token.lookAhead) this.token.lookAhead = pos + 1;\n    return result;\n  }\n  /// Accept a token. By default, the end of the token is set to the\n  /// current stream position, but you can pass an offset (relative to\n  /// the stream position) to change that.\n  acceptToken(token) {\n    let endOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n    if (end == null || end < this.token.start) throw new RangeError(\"Token end out of bounds\");\n    this.token.value = token;\n    this.token.end = end;\n  }\n  getChunk() {\n    if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n      let {\n        chunk,\n        chunkPos\n      } = this;\n      this.chunk = this.chunk2;\n      this.chunkPos = this.chunk2Pos;\n      this.chunk2 = chunk;\n      this.chunk2Pos = chunkPos;\n      this.chunkOff = this.pos - this.chunkPos;\n    } else {\n      this.chunk2 = this.chunk;\n      this.chunk2Pos = this.chunkPos;\n      let nextChunk = this.input.chunk(this.pos);\n      let end = this.pos + nextChunk.length;\n      this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n      this.chunkPos = this.pos;\n      this.chunkOff = 0;\n    }\n  }\n  readNext() {\n    if (this.chunkOff >= this.chunk.length) {\n      this.getChunk();\n      if (this.chunkOff == this.chunk.length) return this.next = -1;\n    }\n    return this.next = this.chunk.charCodeAt(this.chunkOff);\n  }\n  /// Move the stream forward N (defaults to 1) code units. Returns\n  /// the new value of [`next`](#lr.InputStream.next).\n  advance() {\n    let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    this.chunkOff += n;\n    while (this.pos + n >= this.range.to) {\n      if (this.rangeIndex == this.ranges.length - 1) return this.setDone();\n      n -= this.range.to - this.pos;\n      this.range = this.ranges[++this.rangeIndex];\n      this.pos = this.range.from;\n    }\n    this.pos += n;\n    if (this.pos >= this.token.lookAhead) this.token.lookAhead = this.pos + 1;\n    return this.readNext();\n  }\n  setDone() {\n    this.pos = this.chunkPos = this.end;\n    this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n    this.chunk = \"\";\n    return this.next = -1;\n  }\n  /// @internal\n  reset(pos, token) {\n    if (token) {\n      this.token = token;\n      token.start = pos;\n      token.lookAhead = pos + 1;\n      token.value = token.extended = -1;\n    } else {\n      this.token = nullToken;\n    }\n    if (this.pos != pos) {\n      this.pos = pos;\n      if (pos == this.end) {\n        this.setDone();\n        return this;\n      }\n      while (pos < this.range.from) this.range = this.ranges[--this.rangeIndex];\n      while (pos >= this.range.to) this.range = this.ranges[++this.rangeIndex];\n      if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n        this.chunkOff = pos - this.chunkPos;\n      } else {\n        this.chunk = \"\";\n        this.chunkOff = 0;\n      }\n      this.readNext();\n    }\n    return this;\n  }\n  /// @internal\n  read(from, to) {\n    if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length) return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n    if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length) return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n    if (from >= this.range.from && to <= this.range.to) return this.input.read(from, to);\n    let result = \"\";\n    for (let r of this.ranges) {\n      if (r.from >= to) break;\n      if (r.to > from) result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n    }\n    return result;\n  }\n}\n/// @internal\nclass TokenGroup {\n  constructor(data, id) {\n    this.data = data;\n    this.id = id;\n  }\n  token(input, stack) {\n    let {\n      parser\n    } = stack.p;\n    readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n  }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// @hide\nclass LocalTokenGroup {\n  constructor(data, precTable, elseToken) {\n    this.precTable = precTable;\n    this.elseToken = elseToken;\n    this.data = typeof data == \"string\" ? decodeArray(data) : data;\n  }\n  token(input, stack) {\n    let start = input.pos,\n      cur;\n    for (;;) {\n      cur = input.pos;\n      readToken(this.data, input, stack, 0, this.data, this.precTable);\n      if (input.token.value > -1) break;\n      if (this.elseToken == null) return;\n      if (input.next < 0) break;\n      input.advance();\n      input.reset(cur + 1, input.token);\n    }\n    if (cur > start) {\n      input.reset(start, input.token);\n      input.acceptToken(this.elseToken, cur - start);\n    }\n  }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n  /// Create a tokenizer. The first argument is the function that,\n  /// given an input stream, scans for the types of tokens it\n  /// recognizes at the stream's position, and calls\n  /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n  /// one.\n  constructor(\n  /// @internal\n  token) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.token = token;\n    this.contextual = !!options.contextual;\n    this.fallback = !!options.fallback;\n    this.extend = !!options.extend;\n  }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n  let state = 0,\n    groupMask = 1 << group,\n    {\n      dialect\n    } = stack.p.parser;\n  scan: for (;;) {\n    if ((groupMask & data[state]) == 0) break;\n    let accEnd = data[state + 1];\n    // Check whether this state can lead to a token in the current group\n    // Accept tokens in this state, possibly overwriting\n    // lower-precedence / shorter tokens\n    for (let i = state + 3; i < accEnd; i += 2) if ((data[i + 1] & groupMask) > 0) {\n      let term = data[i];\n      if (dialect.allows(term) && (input.token.value == -1 || input.token.value == term || overrides(term, input.token.value, precTable, precOffset))) {\n        input.acceptToken(term);\n        break;\n      }\n    }\n    let next = input.next,\n      low = 0,\n      high = data[state + 2];\n    // Special case for EOF\n    if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n      state = data[accEnd + high * 3 - 1];\n      continue scan;\n    }\n    // Do a binary search on the state's edges\n    for (; low < high;) {\n      let mid = low + high >> 1;\n      let index = accEnd + mid + (mid << 1);\n      let from = data[index],\n        to = data[index + 1] || 0x10000;\n      if (next < from) high = mid;else if (next >= to) low = mid + 1;else {\n        state = data[index + 2];\n        input.advance();\n        continue scan;\n      }\n    }\n    break;\n  }\n}\nfunction findOffset(data, start, term) {\n  for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++) if (next == term) return i - start;\n  return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n  let iPrev = findOffset(tableData, tableOffset, prev);\n  return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n  Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n  let cursor = tree.cursor(IterMode.IncludeAnonymous);\n  cursor.moveTo(pos);\n  for (;;) {\n    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos))) for (;;) {\n      if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError) return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));\n      if (side < 0 ? cursor.prevSibling() : cursor.nextSibling()) break;\n      if (!cursor.parent()) return side < 0 ? 0 : tree.length;\n    }\n  }\n}\nclass FragmentCursor {\n  constructor(fragments, nodeSet) {\n    this.fragments = fragments;\n    this.nodeSet = nodeSet;\n    this.i = 0;\n    this.fragment = null;\n    this.safeFrom = -1;\n    this.safeTo = -1;\n    this.trees = [];\n    this.start = [];\n    this.index = [];\n    this.nextFragment();\n  }\n  nextFragment() {\n    let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n    if (fr) {\n      this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n      this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n      while (this.trees.length) {\n        this.trees.pop();\n        this.start.pop();\n        this.index.pop();\n      }\n      this.trees.push(fr.tree);\n      this.start.push(-fr.offset);\n      this.index.push(0);\n      this.nextStart = this.safeFrom;\n    } else {\n      this.nextStart = 1e9;\n    }\n  }\n  // `pos` must be >= any previously given `pos` for this cursor\n  nodeAt(pos) {\n    if (pos < this.nextStart) return null;\n    while (this.fragment && this.safeTo <= pos) this.nextFragment();\n    if (!this.fragment) return null;\n    for (;;) {\n      let last = this.trees.length - 1;\n      if (last < 0) {\n        // End of tree\n        this.nextFragment();\n        return null;\n      }\n      let top = this.trees[last],\n        index = this.index[last];\n      if (index == top.children.length) {\n        this.trees.pop();\n        this.start.pop();\n        this.index.pop();\n        continue;\n      }\n      let next = top.children[index];\n      let start = this.start[last] + top.positions[index];\n      if (start > pos) {\n        this.nextStart = start;\n        return null;\n      }\n      if (next instanceof Tree) {\n        if (start == pos) {\n          if (start < this.safeFrom) return null;\n          let end = start + next.length;\n          if (end <= this.safeTo) {\n            let lookAhead = next.prop(NodeProp.lookAhead);\n            if (!lookAhead || end + lookAhead < this.fragment.to) return next;\n          }\n        }\n        this.index[last]++;\n        if (start + next.length >= Math.max(this.safeFrom, pos)) {\n          // Enter this node\n          this.trees.push(next);\n          this.start.push(start);\n          this.index.push(0);\n        }\n      } else {\n        this.index[last]++;\n        this.nextStart = start + next.length;\n      }\n    }\n  }\n}\nclass TokenCache {\n  constructor(parser, stream) {\n    this.stream = stream;\n    this.tokens = [];\n    this.mainToken = null;\n    this.actions = [];\n    this.tokens = parser.tokenizers.map(_ => new CachedToken());\n  }\n  getActions(stack) {\n    let actionIndex = 0;\n    let main = null;\n    let {\n        parser\n      } = stack.p,\n      {\n        tokenizers\n      } = parser;\n    let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n    let context = stack.curContext ? stack.curContext.hash : 0;\n    let lookAhead = 0;\n    for (let i = 0; i < tokenizers.length; i++) {\n      if ((1 << i & mask) == 0) continue;\n      let tokenizer = tokenizers[i],\n        token = this.tokens[i];\n      if (main && !tokenizer.fallback) continue;\n      if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n        this.updateCachedToken(token, tokenizer, stack);\n        token.mask = mask;\n        token.context = context;\n      }\n      if (token.lookAhead > token.end + 25 /* Safety.Margin */) lookAhead = Math.max(token.lookAhead, lookAhead);\n      if (token.value != 0 /* Term.Err */) {\n        let startIndex = actionIndex;\n        if (token.extended > -1) actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n        actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n        if (!tokenizer.extend) {\n          main = token;\n          if (actionIndex > startIndex) break;\n        }\n      }\n    }\n    while (this.actions.length > actionIndex) this.actions.pop();\n    if (lookAhead) stack.setLookAhead(lookAhead);\n    if (!main && stack.pos == this.stream.end) {\n      main = new CachedToken();\n      main.value = stack.p.parser.eofTerm;\n      main.start = main.end = stack.pos;\n      actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n    }\n    this.mainToken = main;\n    return this.actions;\n  }\n  getMainToken(stack) {\n    if (this.mainToken) return this.mainToken;\n    let main = new CachedToken(),\n      {\n        pos,\n        p\n      } = stack;\n    main.start = pos;\n    main.end = Math.min(pos + 1, p.stream.end);\n    main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n    return main;\n  }\n  updateCachedToken(token, tokenizer, stack) {\n    let start = this.stream.clipPos(stack.pos);\n    tokenizer.token(this.stream.reset(start, token), stack);\n    if (token.value > -1) {\n      let {\n        parser\n      } = stack.p;\n      for (let i = 0; i < parser.specialized.length; i++) if (parser.specialized[i] == token.value) {\n        let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n          if ((result & 1) == 0 /* Specialize.Specialize */) token.value = result >> 1;else token.extended = result >> 1;\n          break;\n        }\n      }\n    } else {\n      token.value = 0 /* Term.Err */;\n      token.end = this.stream.clipPos(start + 1);\n    }\n  }\n  putAction(action, token, end, index) {\n    // Don't add duplicate actions\n    for (let i = 0; i < index; i += 3) if (this.actions[i] == action) return index;\n    this.actions[index++] = action;\n    this.actions[index++] = token;\n    this.actions[index++] = end;\n    return index;\n  }\n  addActions(stack, token, end, index) {\n    let {\n        state\n      } = stack,\n      {\n        parser\n      } = stack.p,\n      {\n        data\n      } = parser;\n    for (let set = 0; set < 2; set++) {\n      for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n        if (data[i] == 65535 /* Seq.End */) {\n          if (data[i + 1] == 1 /* Seq.Next */) {\n            i = pair(data, i + 2);\n          } else {\n            if (index == 0 && data[i + 1] == 2 /* Seq.Other */) index = this.putAction(pair(data, i + 2), token, end, index);\n            break;\n          }\n        }\n        if (data[i] == token) index = this.putAction(pair(data, i + 1), token, end, index);\n      }\n    }\n    return index;\n  }\n}\nvar Rec;\n(function (Rec) {\n  Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n  Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n  // When two stacks have been running independently long enough to\n  // add this many elements to their buffers, prune one.\n  Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n  Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n  // Once a stack reaches this depth (in .stack.length) force-reduce\n  // it back to CutTo to avoid creating trees that overflow the stack\n  // on recursive traversal.\n  Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n  Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n  Rec[Rec[\"MaxLeftAssociativeReductionCount\"] = 300] = \"MaxLeftAssociativeReductionCount\";\n  // The maximum number of non-recovering stacks to explore (to avoid\n  // getting bogged down with exponentially multiplying stacks in\n  // ambiguous content)\n  Rec[Rec[\"MaxStackCount\"] = 12] = \"MaxStackCount\";\n})(Rec || (Rec = {}));\nclass Parse {\n  constructor(parser, input, fragments, ranges) {\n    this.parser = parser;\n    this.input = input;\n    this.ranges = ranges;\n    this.recovering = 0;\n    this.nextStackID = 0x2654; // â™”, â™•, â™–, â™—, â™˜, â™™, â™ , â™¡, â™¢, â™£, â™¤, â™¥, â™¦, â™§\n    this.minStackPos = 0;\n    this.reused = [];\n    this.stoppedAt = null;\n    this.lastBigReductionStart = -1;\n    this.lastBigReductionSize = 0;\n    this.bigReductionCount = 0;\n    this.stream = new InputStream(input, ranges);\n    this.tokens = new TokenCache(parser, this.stream);\n    this.topTerm = parser.top[1];\n    let {\n      from\n    } = ranges[0];\n    this.stacks = [Stack.start(this, parser.top[0], from)];\n    this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4 ? new FragmentCursor(fragments, parser.nodeSet) : null;\n  }\n  get parsedPos() {\n    return this.minStackPos;\n  }\n  // Move the parser forward. This will process all parse stacks at\n  // `this.pos` and try to advance them to a further position. If no\n  // stack for such a position is found, it'll start error-recovery.\n  //\n  // When the parse is finished, this will return a syntax tree. When\n  // not, it returns `null`.\n  advance() {\n    let stacks = this.stacks,\n      pos = this.minStackPos;\n    // This will hold stacks beyond `pos`.\n    let newStacks = this.stacks = [];\n    let stopped, stoppedTokens;\n    // If a large amount of reductions happened with the same start\n    // position, force the stack out of that production in order to\n    // avoid creating a tree too deep to recurse through.\n    // (This is an ugly kludge, because unfortunately there is no\n    // straightforward, cheap way to check for this happening, due to\n    // the history of reductions only being available in an\n    // expensive-to-access format in the stack buffers.)\n    if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n      let [s] = stacks;\n      while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) {}\n      this.bigReductionCount = this.lastBigReductionSize = 0;\n    }\n    // Keep advancing any stacks at `pos` until they either move\n    // forward or can't be advanced. Gather stacks that can't be\n    // advanced further in `stopped`.\n    for (let i = 0; i < stacks.length; i++) {\n      let stack = stacks[i];\n      for (;;) {\n        this.tokens.mainToken = null;\n        if (stack.pos > pos) {\n          newStacks.push(stack);\n        } else if (this.advanceStack(stack, newStacks, stacks)) {\n          continue;\n        } else {\n          if (!stopped) {\n            stopped = [];\n            stoppedTokens = [];\n          }\n          stopped.push(stack);\n          let tok = this.tokens.getMainToken(stack);\n          stoppedTokens.push(tok.value, tok.end);\n        }\n        break;\n      }\n    }\n    if (!newStacks.length) {\n      let finished = stopped && findFinished(stopped);\n      if (finished) return this.stackToTree(finished);\n      if (this.parser.strict) {\n        if (verbose && stopped) console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n        throw new SyntaxError(\"No parse at \" + pos);\n      }\n      if (!this.recovering) this.recovering = 5 /* Rec.Distance */;\n    }\n\n    if (this.recovering && stopped) {\n      let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0] : this.runRecovery(stopped, stoppedTokens, newStacks);\n      if (finished) return this.stackToTree(finished.forceAll());\n    }\n    if (this.recovering) {\n      let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n      if (newStacks.length > maxRemaining) {\n        newStacks.sort((a, b) => b.score - a.score);\n        while (newStacks.length > maxRemaining) newStacks.pop();\n      }\n      if (newStacks.some(s => s.reducePos > pos)) this.recovering--;\n    } else if (newStacks.length > 1) {\n      // Prune stacks that are in the same state, or that have been\n      // running without splitting for a while, to avoid getting stuck\n      // with multiple successful stacks running endlessly on.\n      outer: for (let i = 0; i < newStacks.length - 1; i++) {\n        let stack = newStacks[i];\n        for (let j = i + 1; j < newStacks.length; j++) {\n          let other = newStacks[j];\n          if (stack.sameState(other) || stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n            if ((stack.score - other.score || stack.buffer.length - other.buffer.length) > 0) {\n              newStacks.splice(j--, 1);\n            } else {\n              newStacks.splice(i--, 1);\n              continue outer;\n            }\n          }\n        }\n      }\n      if (newStacks.length > 12 /* Rec.MaxStackCount */) newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n    }\n\n    this.minStackPos = newStacks[0].pos;\n    for (let i = 1; i < newStacks.length; i++) if (newStacks[i].pos < this.minStackPos) this.minStackPos = newStacks[i].pos;\n    return null;\n  }\n  stopAt(pos) {\n    if (this.stoppedAt != null && this.stoppedAt < pos) throw new RangeError(\"Can't move stoppedAt forward\");\n    this.stoppedAt = pos;\n  }\n  // Returns an updated version of the given stack, or null if the\n  // stack can't advance normally. When `split` and `stacks` are\n  // given, stacks split off by ambiguous operations will be pushed to\n  // `split`, or added to `stacks` if they move `pos` forward.\n  advanceStack(stack, stacks, split) {\n    let start = stack.pos,\n      {\n        parser\n      } = this;\n    let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n    if (this.stoppedAt != null && start > this.stoppedAt) return stack.forceReduce() ? stack : null;\n    if (this.fragments) {\n      let strictCx = stack.curContext && stack.curContext.tracker.strict,\n        cxHash = strictCx ? stack.curContext.hash : 0;\n      for (let cached = this.fragments.nodeAt(start); cached;) {\n        let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n        if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n          stack.useNode(cached, match);\n          if (verbose) console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n          return true;\n        }\n        if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0) break;\n        let inner = cached.children[0];\n        if (inner instanceof Tree && cached.positions[0] == 0) cached = inner;else break;\n      }\n    }\n    let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n    if (defaultReduce > 0) {\n      stack.reduce(defaultReduce);\n      if (verbose) console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n      return true;\n    }\n    if (stack.stack.length >= 15000 /* Rec.CutDepth */) {\n      while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) {}\n    }\n    let actions = this.tokens.getActions(stack);\n    for (let i = 0; i < actions.length;) {\n      let action = actions[i++],\n        term = actions[i++],\n        end = actions[i++];\n      let last = i == actions.length || !split;\n      let localStack = last ? stack : stack.split();\n      localStack.apply(action, term, end);\n      if (verbose) console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\" : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n      if (last) return true;else if (localStack.pos > start) stacks.push(localStack);else split.push(localStack);\n    }\n    return false;\n  }\n  // Advance a given stack forward as far as it will go. Returns the\n  // (possibly updated) stack if it got stuck, or null if it moved\n  // forward and was given to `pushStackDedup`.\n  advanceFully(stack, newStacks) {\n    let pos = stack.pos;\n    for (;;) {\n      if (!this.advanceStack(stack, null, null)) return false;\n      if (stack.pos > pos) {\n        pushStackDedup(stack, newStacks);\n        return true;\n      }\n    }\n  }\n  runRecovery(stacks, tokens, newStacks) {\n    let finished = null,\n      restarted = false;\n    for (let i = 0; i < stacks.length; i++) {\n      let stack = stacks[i],\n        token = tokens[i << 1],\n        tokenEnd = tokens[(i << 1) + 1];\n      let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n      if (stack.deadEnd) {\n        if (restarted) continue;\n        restarted = true;\n        stack.restart();\n        if (verbose) console.log(base + this.stackID(stack) + \" (restarted)\");\n        let done = this.advanceFully(stack, newStacks);\n        if (done) continue;\n      }\n      let force = stack.split(),\n        forceBase = base;\n      for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n        if (verbose) console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n        let done = this.advanceFully(force, newStacks);\n        if (done) break;\n        if (verbose) forceBase = this.stackID(force) + \" -> \";\n      }\n      for (let insert of stack.recoverByInsert(token)) {\n        if (verbose) console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n        this.advanceFully(insert, newStacks);\n      }\n      if (this.stream.end > stack.pos) {\n        if (tokenEnd == stack.pos) {\n          tokenEnd++;\n          token = 0 /* Term.Err */;\n        }\n\n        stack.recoverByDelete(token, tokenEnd);\n        if (verbose) console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n        pushStackDedup(stack, newStacks);\n      } else if (!finished || finished.score < stack.score) {\n        finished = stack;\n      }\n    }\n    return finished;\n  }\n  // Convert the stack's buffer to a syntax tree.\n  stackToTree(stack) {\n    stack.close();\n    return Tree.build({\n      buffer: StackBufferCursor.create(stack),\n      nodeSet: this.parser.nodeSet,\n      topID: this.topTerm,\n      maxBufferLength: this.parser.bufferLength,\n      reused: this.reused,\n      start: this.ranges[0].from,\n      length: stack.pos - this.ranges[0].from,\n      minRepeatType: this.parser.minRepeatTerm\n    });\n  }\n  stackID(stack) {\n    let id = (stackIDs || (stackIDs = new WeakMap())).get(stack);\n    if (!id) stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n    return id + stack;\n  }\n}\nfunction pushStackDedup(stack, newStacks) {\n  for (let i = 0; i < newStacks.length; i++) {\n    let other = newStacks[i];\n    if (other.pos == stack.pos && other.sameState(stack)) {\n      if (newStacks[i].score < stack.score) newStacks[i] = stack;\n      return;\n    }\n  }\n  newStacks.push(stack);\n}\nclass Dialect {\n  constructor(source, flags, disabled) {\n    this.source = source;\n    this.flags = flags;\n    this.disabled = disabled;\n  }\n  allows(term) {\n    return !this.disabled || this.disabled[term] == 0;\n  }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n  /// Define a context tracker.\n  constructor(spec) {\n    this.start = spec.start;\n    this.shift = spec.shift || id;\n    this.reduce = spec.reduce || id;\n    this.reuse = spec.reuse || id;\n    this.hash = spec.hash || (() => 0);\n    this.strict = spec.strict !== false;\n  }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends Parser {\n  /// @internal\n  constructor(spec) {\n    super();\n    /// @internal\n    this.wrappers = [];\n    if (spec.version != 14 /* File.Version */) throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n    let nodeNames = spec.nodeNames.split(\" \");\n    this.minRepeatTerm = nodeNames.length;\n    for (let i = 0; i < spec.repeatNodeCount; i++) nodeNames.push(\"\");\n    let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n    let nodeProps = [];\n    for (let i = 0; i < nodeNames.length; i++) nodeProps.push([]);\n    function setProp(nodeID, prop, value) {\n      nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n    }\n    if (spec.nodeProps) for (let propSpec of spec.nodeProps) {\n      let prop = propSpec[0];\n      if (typeof prop == \"string\") prop = NodeProp[prop];\n      for (let i = 1; i < propSpec.length;) {\n        let next = propSpec[i++];\n        if (next >= 0) {\n          setProp(next, prop, propSpec[i++]);\n        } else {\n          let value = propSpec[i + -next];\n          for (let j = -next; j > 0; j--) setProp(propSpec[i++], prop, value);\n          i++;\n        }\n      }\n    }\n    this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n      name: i >= this.minRepeatTerm ? undefined : name,\n      id: i,\n      props: nodeProps[i],\n      top: topTerms.indexOf(i) > -1,\n      error: i == 0,\n      skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n    })));\n    if (spec.propSources) this.nodeSet = this.nodeSet.extend(...spec.propSources);\n    this.strict = false;\n    this.bufferLength = DefaultBufferLength;\n    let tokenArray = decodeArray(spec.tokenData);\n    this.context = spec.context;\n    this.specializerSpecs = spec.specialized || [];\n    this.specialized = new Uint16Array(this.specializerSpecs.length);\n    for (let i = 0; i < this.specializerSpecs.length; i++) this.specialized[i] = this.specializerSpecs[i].term;\n    this.specializers = this.specializerSpecs.map(getSpecializer);\n    this.states = decodeArray(spec.states, Uint32Array);\n    this.data = decodeArray(spec.stateData);\n    this.goto = decodeArray(spec.goto);\n    this.maxTerm = spec.maxTerm;\n    this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n    this.topRules = spec.topRules;\n    this.dialects = spec.dialects || {};\n    this.dynamicPrecedences = spec.dynamicPrecedences || null;\n    this.tokenPrecTable = spec.tokenPrec;\n    this.termNames = spec.termNames || null;\n    this.maxNode = this.nodeSet.types.length - 1;\n    this.dialect = this.parseDialect();\n    this.top = this.topRules[Object.keys(this.topRules)[0]];\n  }\n  createParse(input, fragments, ranges) {\n    let parse = new Parse(this, input, fragments, ranges);\n    for (let w of this.wrappers) parse = w(parse, input, fragments, ranges);\n    return parse;\n  }\n  /// Get a goto table entry @internal\n  getGoto(state, term) {\n    let loose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let table = this.goto;\n    if (term >= table[0]) return -1;\n    for (let pos = table[term + 1];;) {\n      let groupTag = table[pos++],\n        last = groupTag & 1;\n      let target = table[pos++];\n      if (last && loose) return target;\n      for (let end = pos + (groupTag >> 1); pos < end; pos++) if (table[pos] == state) return target;\n      if (last) return -1;\n    }\n  }\n  /// Check if this state has an action for a given terminal @internal\n  hasAction(state, terminal) {\n    let data = this.data;\n    for (let set = 0; set < 2; set++) {\n      for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n        if ((next = data[i]) == 65535 /* Seq.End */) {\n          if (data[i + 1] == 1 /* Seq.Next */) next = data[i = pair(data, i + 2)];else if (data[i + 1] == 2 /* Seq.Other */) return pair(data, i + 2);else break;\n        }\n        if (next == terminal || next == 0 /* Term.Err */) return pair(data, i + 1);\n      }\n    }\n    return 0;\n  }\n  /// @internal\n  stateSlot(state, slot) {\n    return this.states[state * 6 /* ParseState.Size */ + slot];\n  }\n  /// @internal\n  stateFlag(state, flag) {\n    return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n  }\n  /// @internal\n  validAction(state, action) {\n    if (action == this.stateSlot(state, 4 /* ParseState.DefaultReduce */)) return true;\n    for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n      if (this.data[i] == 65535 /* Seq.End */) {\n        if (this.data[i + 1] == 1 /* Seq.Next */) i = pair(this.data, i + 2);else return false;\n      }\n      if (action == pair(this.data, i + 1)) return true;\n    }\n  }\n  /// Get the states that can follow this one through shift actions or\n  /// goto jumps. @internal\n  nextStates(state) {\n    let result = [];\n    for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n      if (this.data[i] == 65535 /* Seq.End */) {\n        if (this.data[i + 1] == 1 /* Seq.Next */) i = pair(this.data, i + 2);else break;\n      }\n      if ((this.data[i + 2] & 65536 /* Action.ReduceFlag */ >> 16) == 0) {\n        let value = this.data[i + 1];\n        if (!result.some((v, i) => i & 1 && v == value)) result.push(this.data[i], value);\n      }\n    }\n    return result;\n  }\n  /// Configure the parser. Returns a new parser instance that has the\n  /// given settings modified. Settings not provided in `config` are\n  /// kept from the original parser.\n  configure(config) {\n    // Hideous reflection-based kludge to make it easy to create a\n    // slightly modified copy of a parser.\n    let copy = Object.assign(Object.create(LRParser.prototype), this);\n    if (config.props) copy.nodeSet = this.nodeSet.extend(...config.props);\n    if (config.top) {\n      let info = this.topRules[config.top];\n      if (!info) throw new RangeError(`Invalid top rule name ${config.top}`);\n      copy.top = info;\n    }\n    if (config.tokenizers) copy.tokenizers = this.tokenizers.map(t => {\n      let found = config.tokenizers.find(r => r.from == t);\n      return found ? found.to : t;\n    });\n    if (config.specializers) {\n      copy.specializers = this.specializers.slice();\n      copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n        let found = config.specializers.find(r => r.from == s.external);\n        if (!found) return s;\n        let spec = Object.assign(Object.assign({}, s), {\n          external: found.to\n        });\n        copy.specializers[i] = getSpecializer(spec);\n        return spec;\n      });\n    }\n    if (config.contextTracker) copy.context = config.contextTracker;\n    if (config.dialect) copy.dialect = this.parseDialect(config.dialect);\n    if (config.strict != null) copy.strict = config.strict;\n    if (config.wrap) copy.wrappers = copy.wrappers.concat(config.wrap);\n    if (config.bufferLength != null) copy.bufferLength = config.bufferLength;\n    return copy;\n  }\n  /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n  /// are registered for this parser.\n  hasWrappers() {\n    return this.wrappers.length > 0;\n  }\n  /// Returns the name associated with a given term. This will only\n  /// work for all terms when the parser was generated with the\n  /// `--names` option. By default, only the names of tagged terms are\n  /// stored.\n  getName(term) {\n    return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n  }\n  /// The eof term id is always allocated directly after the node\n  /// types. @internal\n  get eofTerm() {\n    return this.maxNode + 1;\n  }\n  /// The type of top node produced by the parser.\n  get topNode() {\n    return this.nodeSet.types[this.top[1]];\n  }\n  /// @internal\n  dynamicPrecedence(term) {\n    let prec = this.dynamicPrecedences;\n    return prec == null ? 0 : prec[term] || 0;\n  }\n  /// @internal\n  parseDialect(dialect) {\n    let values = Object.keys(this.dialects),\n      flags = values.map(() => false);\n    if (dialect) for (let part of dialect.split(\" \")) {\n      let id = values.indexOf(part);\n      if (id >= 0) flags[id] = true;\n    }\n    let disabled = null;\n    for (let i = 0; i < values.length; i++) if (!flags[i]) {\n      for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;) (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n    }\n    return new Dialect(dialect, flags, disabled);\n  }\n  /// Used by the output of the parser generator. Not available to\n  /// user code. @hide\n  static deserialize(spec) {\n    return new LRParser(spec);\n  }\n}\nfunction pair(data, off) {\n  return data[off] | data[off + 1] << 16;\n}\nfunction findFinished(stacks) {\n  let best = null;\n  for (let stack of stacks) {\n    let stopped = stack.p.stoppedAt;\n    if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) && stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) && (!best || best.score < stack.score)) best = stack;\n  }\n  return best;\n}\nfunction getSpecializer(spec) {\n  if (spec.external) {\n    let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n    return (value, stack) => spec.external(value, stack) << 1 | mask;\n  }\n  return spec.get;\n}\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };","map":{"version":3,"names":["Parser","NodeProp","NodeSet","NodeType","DefaultBufferLength","Tree","IterMode","Stack","constructor","p","stack","state","reducePos","pos","score","buffer","bufferBase","curContext","lookAhead","parent","toString","filter","_","i","concat","start","cx","parser","context","StackContext","pushState","push","length","reduce","action","_a","depth","type","dPrec","dynamicPrecedence","getGoto","minRepeatTerm","storeNode","reduceContext","base","ranges","from","size","nodeSet","types","isAnonymous","lastBigReductionStart","bigReductionCount","lastBigReductionSize","count","stateFlag","baseStateID","pop","term","end","isReduce","cur","top","index","shift","next","nextEnd","nextState","maxNode","shiftContext","apply","useNode","value","reused","updateContext","tracker","reuse","stream","reset","split","off","slice","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","best","s","some","v","result","forceReduce","validAction","target","forceAll","deadEnd","data","restart","sameState","other","dialectEnabled","dialectID","dialect","flags","emitContext","last","hash","emitLookAhead","newCx","setLookAhead","close","strict","Recover","goto","StackBufferCursor","maybeNext","create","id","fork","decodeArray","input","Type","Uint16Array","array","out","charCodeAt","stop","digit","CachedToken","extended","mask","nullToken","InputStream","chunk","chunkOff","chunk2","chunk2Pos","token","rangeIndex","chunkPos","range","to","readNext","resolveOffset","offset","assoc","clipPos","Math","max","peek","idx","resolved","acceptToken","endOffset","RangeError","getChunk","nextChunk","advance","n","setDone","read","r","min","TokenGroup","readToken","tokenPrecTable","prototype","contextual","fallback","extend","LocalTokenGroup","precTable","elseToken","ExternalTokenizer","options","group","precOffset","groupMask","scan","accEnd","allows","overrides","low","high","mid","findOffset","prev","tableData","tableOffset","iPrev","verbose","process","env","test","LOG","stackIDs","Safety","cutAt","tree","side","cursor","IncludeAnonymous","moveTo","childBefore","childAfter","isError","prevSibling","nextSibling","FragmentCursor","fragments","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","nodeAt","children","positions","prop","TokenCache","tokens","mainToken","actions","tokenizers","map","getActions","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","eofTerm","getMainToken","specialized","specializers","putAction","set","pair","Rec","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","parsedPos","newStacks","stopped","stoppedTokens","advanceStack","tok","finished","findFinished","stackToTree","console","log","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","outer","j","splice","stopAt","stackID","strictCx","cxHash","cached","match","contextHash","inner","defaultReduce","localStack","advanceFully","pushStackDedup","restarted","tokenEnd","done","force","forceBase","insert","build","topID","maxBufferLength","minRepeatType","WeakMap","get","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","spec","LRParser","wrappers","version","nodeNames","repeatNodeCount","topTerms","Object","keys","topRules","nodeProps","setProp","nodeID","deserialize","propSpec","name","define","undefined","props","indexOf","error","skipped","skippedNodes","propSources","tokenArray","tokenData","specializerSpecs","getSpecializer","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrec","termNames","parseDialect","createParse","parse","w","loose","table","groupTag","terminal","slot","flag","configure","config","copy","assign","info","t","found","find","external","contextTracker","wrap","hasWrappers","topNode","prec","values","part","Uint8Array"],"sources":["/Users/kunal/Desktop/Vetanshu/CodeCollab/CodeCollab/frontend/node_modules/@lezer/lr/dist/index.js"],"sourcesContent":["import { Parser, NodeProp, NodeSet, NodeType, DefaultBufferLength, Tree, IterMode } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        var _a;\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special caseâ€”they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Term.Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n    Recover[Recover[\"MinBigReduction\"] = 2000] = \"MinBigReduction\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /// @internal\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// @internal\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsingâ€”when looking forwardâ€”or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// @hide\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, cur;\n        for (;;) {\n            cur = input.pos;\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (input.next < 0)\n                break;\n            input.advance();\n            input.reset(cur + 1, input.token);\n        }\n        if (cur > start) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, cur - start);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Safety.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n    Rec[Rec[\"MaxLeftAssociativeReductionCount\"] = 300] = \"MaxLeftAssociativeReductionCount\";\n    // The maximum number of non-recovering stacks to explore (to avoid\n    // getting bogged down with exponentially multiplying stacks in\n    // ambiguous content)\n    Rec[Rec[\"MaxStackCount\"] = 12] = \"MaxStackCount\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // â™”, â™•, â™–, â™—, â™˜, â™™, â™ , â™¡, â™¢, â™£, â™¤, â™¥, â™¦, â™§\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n            if (newStacks.length > 12 /* Rec.MaxStackCount */)\n                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* Rec.CutDepth */) {\n            while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* ParseState.DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// Used by the output of the parser generator. Not available to\n    /// user code. @hide\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, LocalTokenGroup, Stack };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}