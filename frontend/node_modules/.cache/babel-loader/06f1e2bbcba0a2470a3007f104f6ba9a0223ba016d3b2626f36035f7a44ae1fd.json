{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n/**\n * @name Xcode\n */\nimport { tags as t } from '@lezer/highlight';\nimport { createTheme } from '@uiw/codemirror-themes';\nexport var defaultSettingsXcodeLight = {\n  background: '#fff',\n  foreground: '#3D3D3D',\n  selection: '#BBDFFF',\n  selectionMatch: '#BBDFFF',\n  gutterBackground: '#fff',\n  gutterForeground: '#AFAFAF',\n  lineHighlight: '#EDF4FF'\n};\nexport function xcodeLightInit(options) {\n  var {\n    theme = 'light',\n    settings = {},\n    styles = []\n  } = options || {};\n  return createTheme({\n    theme: theme,\n    settings: _extends({}, defaultSettingsXcodeLight, settings),\n    styles: [{\n      tag: [t.comment, t.quote],\n      color: '#707F8D'\n    }, {\n      tag: [t.typeName, t.typeOperator],\n      color: '#aa0d91'\n    }, {\n      tag: [t.keyword],\n      color: '#aa0d91',\n      fontWeight: 'bold'\n    }, {\n      tag: [t.string, t.meta],\n      color: '#D23423'\n    }, {\n      tag: [t.name],\n      color: '#032f62'\n    }, {\n      tag: [t.typeName],\n      color: '#522BB2'\n    }, {\n      tag: [t.variableName],\n      color: '#23575C'\n    }, {\n      tag: [t.definition(t.variableName)],\n      color: '#327A9E'\n    }, {\n      tag: [t.regexp, t.link],\n      color: '#0e0eff'\n    }, ...styles]\n  });\n}\nexport var xcodeLight = xcodeLightInit();\nexport var defaultSettingsXcodeDark = {\n  background: '#292A30',\n  foreground: '#CECFD0',\n  caret: '#fff',\n  selection: '#727377',\n  selectionMatch: '#727377',\n  lineHighlight: '#2F3239'\n};\nexport var xcodeDarkInit = options => {\n  var {\n    theme = 'dark',\n    settings = {},\n    styles = []\n  } = options || {};\n  return createTheme({\n    theme: theme,\n    settings: _extends({}, defaultSettingsXcodeDark, settings),\n    styles: [{\n      tag: [t.comment, t.quote],\n      color: '#7F8C98'\n    }, {\n      tag: [t.keyword],\n      color: '#FF7AB2',\n      fontWeight: 'bold'\n    }, {\n      tag: [t.string, t.meta],\n      color: '#FF8170'\n    }, {\n      tag: [t.typeName],\n      color: '#DABAFF'\n    }, {\n      tag: [t.definition(t.variableName)],\n      color: '#6BDFFF'\n    }, {\n      tag: [t.name],\n      color: '#6BAA9F'\n    }, {\n      tag: [t.variableName],\n      color: '#ACF2E4'\n    }, {\n      tag: [t.regexp, t.link],\n      color: '#FF8170'\n    }, ...styles]\n  });\n};\nexport var xcodeDark = xcodeDarkInit();","map":{"version":3,"mappings":";AAAA;AACA;AACA;AACA,SAASA,IAAI,IAAIC,CAAC,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAA4B,wBAAwB;AAExE,OAAO,IAAMC,yBAAyD,GAAG;EACvEC,UAAU,EAAE,MAAM;EAClBC,UAAU,EAAE,SAAS;EACrBC,SAAS,EAAE,SAAS;EACpBC,cAAc,EAAE,SAAS;EACzBC,gBAAgB,EAAE,MAAM;EACxBC,gBAAgB,EAAE,SAAS;EAC3BC,aAAa,EAAE;AACjB,CAAC;AAED,OAAO,SAASC,cAAc,CAACC,OAAqC,EAAE;EACpE,IAAM;IAAEC,KAAK,GAAG,OAAO;IAAEC,QAAQ,GAAG,CAAC,CAAC;IAAEC,MAAM,GAAG;EAAG,CAAC,GAAGH,OAAO,IAAI,CAAC,CAAC;EACrE,OAAOV,WAAW,CAAC;IACjBW,KAAK,EAAEA,KAAK;IACZC,QAAQ,eACHX,yBAAyB,EACzBW,QAAQ,CACZ;IACDC,MAAM,EAAE,CACN;MAAEC,GAAG,EAAE,CAACf,CAAC,CAACgB,OAAO,EAAEhB,CAAC,CAACiB,KAAK,CAAC;MAAEC,KAAK,EAAE;IAAU,CAAC,EAC/C;MAAEH,GAAG,EAAE,CAACf,CAAC,CAACmB,QAAQ,EAAEnB,CAAC,CAACoB,YAAY,CAAC;MAAEF,KAAK,EAAE;IAAU,CAAC,EACvD;MAAEH,GAAG,EAAE,CAACf,CAAC,CAACqB,OAAO,CAAC;MAAEH,KAAK,EAAE,SAAS;MAAEI,UAAU,EAAE;IAAO,CAAC,EAC1D;MAAEP,GAAG,EAAE,CAACf,CAAC,CAACuB,MAAM,EAAEvB,CAAC,CAACwB,IAAI,CAAC;MAAEN,KAAK,EAAE;IAAU,CAAC,EAC7C;MAAEH,GAAG,EAAE,CAACf,CAAC,CAACyB,IAAI,CAAC;MAAEP,KAAK,EAAE;IAAU,CAAC,EACnC;MAAEH,GAAG,EAAE,CAACf,CAAC,CAACmB,QAAQ,CAAC;MAAED,KAAK,EAAE;IAAU,CAAC,EACvC;MAAEH,GAAG,EAAE,CAACf,CAAC,CAAC0B,YAAY,CAAC;MAAER,KAAK,EAAE;IAAU,CAAC,EAC3C;MAAEH,GAAG,EAAE,CAACf,CAAC,CAAC2B,UAAU,CAAC3B,CAAC,CAAC0B,YAAY,CAAC,CAAC;MAAER,KAAK,EAAE;IAAU,CAAC,EACzD;MAAEH,GAAG,EAAE,CAACf,CAAC,CAAC4B,MAAM,EAAE5B,CAAC,CAAC6B,IAAI,CAAC;MAAEX,KAAK,EAAE;IAAU,CAAC,EAC7C,GAAGJ,MAAM;EAEb,CAAC,CAAC;AACJ;AAEA,OAAO,IAAMgB,UAAU,GAAGpB,cAAc,EAAE;AAE1C,OAAO,IAAMqB,wBAAwD,GAAG;EACtE5B,UAAU,EAAE,SAAS;EACrBC,UAAU,EAAE,SAAS;EACrB4B,KAAK,EAAE,MAAM;EACb3B,SAAS,EAAE,SAAS;EACpBC,cAAc,EAAE,SAAS;EACzBG,aAAa,EAAE;AACjB,CAAC;AAED,OAAO,IAAMwB,aAAa,GAAItB,OAAqC,IAAK;EACtE,IAAM;IAAEC,KAAK,GAAG,MAAM;IAAEC,QAAQ,GAAG,CAAC,CAAC;IAAEC,MAAM,GAAG;EAAG,CAAC,GAAGH,OAAO,IAAI,CAAC,CAAC;EACpE,OAAOV,WAAW,CAAC;IACjBW,KAAK,EAAEA,KAAK;IACZC,QAAQ,eACHkB,wBAAwB,EACxBlB,QAAQ,CACZ;IACDC,MAAM,EAAE,CACN;MAAEC,GAAG,EAAE,CAACf,CAAC,CAACgB,OAAO,EAAEhB,CAAC,CAACiB,KAAK,CAAC;MAAEC,KAAK,EAAE;IAAU,CAAC,EAC/C;MAAEH,GAAG,EAAE,CAACf,CAAC,CAACqB,OAAO,CAAC;MAAEH,KAAK,EAAE,SAAS;MAAEI,UAAU,EAAE;IAAO,CAAC,EAC1D;MAAEP,GAAG,EAAE,CAACf,CAAC,CAACuB,MAAM,EAAEvB,CAAC,CAACwB,IAAI,CAAC;MAAEN,KAAK,EAAE;IAAU,CAAC,EAC7C;MAAEH,GAAG,EAAE,CAACf,CAAC,CAACmB,QAAQ,CAAC;MAAED,KAAK,EAAE;IAAU,CAAC,EACvC;MAAEH,GAAG,EAAE,CAACf,CAAC,CAAC2B,UAAU,CAAC3B,CAAC,CAAC0B,YAAY,CAAC,CAAC;MAAER,KAAK,EAAE;IAAU,CAAC,EACzD;MAAEH,GAAG,EAAE,CAACf,CAAC,CAACyB,IAAI,CAAC;MAAEP,KAAK,EAAE;IAAU,CAAC,EACnC;MAAEH,GAAG,EAAE,CAACf,CAAC,CAAC0B,YAAY,CAAC;MAAER,KAAK,EAAE;IAAU,CAAC,EAC3C;MAAEH,GAAG,EAAE,CAACf,CAAC,CAAC4B,MAAM,EAAE5B,CAAC,CAAC6B,IAAI,CAAC;MAAEX,KAAK,EAAE;IAAU,CAAC,EAC7C,GAAGJ,MAAM;EAEb,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,IAAMoB,SAAS,GAAGD,aAAa,EAAE","names":["tags","t","createTheme","defaultSettingsXcodeLight","background","foreground","selection","selectionMatch","gutterBackground","gutterForeground","lineHighlight","xcodeLightInit","options","theme","settings","styles","tag","comment","quote","color","typeName","typeOperator","keyword","fontWeight","string","meta","name","variableName","definition","regexp","link","xcodeLight","defaultSettingsXcodeDark","caret","xcodeDarkInit","xcodeDark"],"sources":["/Users/kunal/Desktop/Vetanshu/CodeCollab/CodeCollab/frontend/node_modules/@uiw/codemirror-theme-xcode/src/index.ts"],"sourcesContent":["/**\n * @name Xcode\n */\nimport { tags as t } from '@lezer/highlight';\nimport { createTheme, CreateThemeOptions } from '@uiw/codemirror-themes';\n\nexport const defaultSettingsXcodeLight: CreateThemeOptions['settings'] = {\n  background: '#fff',\n  foreground: '#3D3D3D',\n  selection: '#BBDFFF',\n  selectionMatch: '#BBDFFF',\n  gutterBackground: '#fff',\n  gutterForeground: '#AFAFAF',\n  lineHighlight: '#EDF4FF',\n};\n\nexport function xcodeLightInit(options?: Partial<CreateThemeOptions>) {\n  const { theme = 'light', settings = {}, styles = [] } = options || {};\n  return createTheme({\n    theme: theme,\n    settings: {\n      ...defaultSettingsXcodeLight,\n      ...settings,\n    },\n    styles: [\n      { tag: [t.comment, t.quote], color: '#707F8D' },\n      { tag: [t.typeName, t.typeOperator], color: '#aa0d91' },\n      { tag: [t.keyword], color: '#aa0d91', fontWeight: 'bold' },\n      { tag: [t.string, t.meta], color: '#D23423' },\n      { tag: [t.name], color: '#032f62' },\n      { tag: [t.typeName], color: '#522BB2' },\n      { tag: [t.variableName], color: '#23575C' },\n      { tag: [t.definition(t.variableName)], color: '#327A9E' },\n      { tag: [t.regexp, t.link], color: '#0e0eff' },\n      ...styles,\n    ],\n  });\n}\n\nexport const xcodeLight = xcodeLightInit();\n\nexport const defaultSettingsXcodeDark: CreateThemeOptions['settings'] = {\n  background: '#292A30',\n  foreground: '#CECFD0',\n  caret: '#fff',\n  selection: '#727377',\n  selectionMatch: '#727377',\n  lineHighlight: '#2F3239',\n};\n\nexport const xcodeDarkInit = (options?: Partial<CreateThemeOptions>) => {\n  const { theme = 'dark', settings = {}, styles = [] } = options || {};\n  return createTheme({\n    theme: theme,\n    settings: {\n      ...defaultSettingsXcodeDark,\n      ...settings,\n    },\n    styles: [\n      { tag: [t.comment, t.quote], color: '#7F8C98' },\n      { tag: [t.keyword], color: '#FF7AB2', fontWeight: 'bold' },\n      { tag: [t.string, t.meta], color: '#FF8170' },\n      { tag: [t.typeName], color: '#DABAFF' },\n      { tag: [t.definition(t.variableName)], color: '#6BDFFF' },\n      { tag: [t.name], color: '#6BAA9F' },\n      { tag: [t.variableName], color: '#ACF2E4' },\n      { tag: [t.regexp, t.link], color: '#FF8170' },\n      ...styles,\n    ],\n  });\n};\n\nexport const xcodeDark = xcodeDarkInit();\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}